---
import Layout from "../layouts/Layout.astro";
import { Image } from "astro:assets";
import CardLayout from "../layouts/CardLayout.astro";
import LinkedIcon from "../../public/svgIcon/linkedIcon.astro";
import GithubIcon from "../../public/svgIcon/githubIcon.astro";
import MailIcon from "../../public/svgIcon/mailIcon.astro";
import DownloadIcon from "../../public/svgIcon/downloadIcon.astro";
import Linkarrow from "../../public/svgIcon/linkarrow.astro";
import Profile from "../../public/vid/profile.jpg";

const cards = [
  {
    title: "Online Resume Creator",
    link: "",
    videolink: "vid/newrsume.webm",
    slug: "online-resume-creator",
  },

  {
    title: "React-Online-Code-Editor",
    link: "",
    videolink: "vid/neweditor.webm",
    slug: "react-online-code-editor",
  },

  {
    title: "E-commerce Price Comparison App",
    link: "",
    videolink: "vid/newecom.webm",
    slug: "ecommerce-price-comparison",
  },

  {
    title: "Css Art Illustrations",
    link: "",
    videolink: "vid/cssarts.webm",
    slug: "css-arts",
  },

  {
    title: "React-Online-Code-Editor",
    link: "",
    videolink: "vid/neweditor.webm",
    slug: "react-online-code-editor",
  },

  {
    title: "E-commerce Price Comparison App",
    link: "",
    videolink: "vid/newecom.webm",
    slug: "ecommerce-price-comparison",
  },
];
---

<Layout title="homepage">
  <main class="md:w-[700px] md:mx-auto relative">
    <header
      class="flex flex-col md:gap-4 border md:px-6 headershit md:w-[700px] w-full h-full md:mx-auto gap-10"
    >
      <div
        class="flex md:flex-row items-center justify-between md:my-6 mt-2 gap-8 headertop mx-6 md:mx-0"
      >
        <!-- <div class="w-20 h-20 border rounded-full bg-gray-400"></div> -->
        <div class="flex flex-row items-center md:gap-4 gap-1 headername">
          <div class="flex">
            <span class="w-16 h-16 rounded-full overflow-hidden">
              <Image src={Profile} width={100} height={100} alt="profile pics" />
            </span>
          </div>
          <div class="flex flex-col mt-4 md:mt-0 w-full profilename">
            <h3 class="[font-size:clamp(1rem,5vw,1.5rem)]">Olajide Seun</h3>
            <div class="relative flex flex-col w-full">
              <p id="" class="z-20 text-[#676767] text-nowrap">Web Developer</p>
            </div>
          </div>
        </div>

        <div class="flex items-center gap-2">
          <a
            href="https://www.linkedin.com/in/oluwaseun-olajide-05017a124"
            class="hover:[transform:translateY(-5px)] [transition:.3s_ease-in]"
            aria-label="linkedin-profile-link"
          >
            <LinkedIcon />
          </a>
          <a
            href="https://github.com/shenkzjay"
            class="hover:[transform:translateY(-5px)] [transition:.3s_ease-in]"
            aria-label="github-profile-link"
          >
            <GithubIcon />
          </a>
          <a
            href="mailto:senksjay@gmail.com"
            class="hover:[transform:translateY(-5px)] [transition:.3s_ease-in]"
            aria-label="email-link"
          >
            <MailIcon />
          </a>
        </div>
      </div>

      <div class="text-center flex justify-center displaytext overflow-hidden">
        <p class="w-2/3 text-[#676767]">
          creating simple, usable, interactive and functional interfaces
        </p>
      </div>
    </header>

    <section class="tabdetails border-[.5px]">
      <div
        class="grid md:grid-cols-[repeat(auto-fit,minmax(300px,1fr))] grid-cols-[repeat(auto-fit,minmax(300px,1fr))] gap-12 w-full md:p-6 py-6"
      >
        {
          cards?.map((items) => (
            <div class="" aria-label={items.title}>
              <CardLayout title={items.title} videolink={items.videolink} slug={`${items.slug}`} />
            </div>
          ))
        }
      </div>
    </section>
    <footer
      class="flex md:flex-row flex-col gap-6 justify-center items-center my-20 text-[#676767]"
    >
      <div>
        <span>Olajide Seun</span>
        <span>|</span>
        <span>Web developer</span>
      </div>
      <div class="group">
        <a
          href="/resume.pdf"
          target="_blank"
          rel="nonreferrer"
          class="flex text-black items-center gap-1 group-hover:font-semibold"
          download
        >
          View Resume
          <span class="hidden group-hover:flex"><Linkarrow /></span>
        </a>
      </div>

      <!-- <div class="theme-switch-wrapper">
        <label class="theme-switch" for="checkbox">
          <input type="checkbox" name="checkbox" title="checkbox" id="checkbox" />
          <div class="slider round"></div>
        </label>
        <em>Enable dark mode</em>
      </div> -->
    </footer>
  </main>
</Layout>

<style>
  .chatcard::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    background: linear-gradient(-135deg, #e4e4e4 49%, transparent 50%) 10% 0 / 3vmin 3vmin;
    background-repeat: no-repeat;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

  .chatcardright::before {
    content: "";
    position: absolute;
    top: 0;
    left: 50vmin;
    background: linear-gradient(135deg, #e4e4e4 49%, transparent 50%) 0% 0 / 3vmin 3vmin;
    background-repeat: no-repeat;
    width: 100%;
    height: 100%;
    z-index: -1;
  }
  input[type="radio"] {
    display: none;
  }

  .tabdetails > .projectTab {
    display: none;
  }

  .tabdetails > .projectTab.active {
    display: grid;
  }

  @supports (anchor-name: --slider-menu) {
    .nav {
      anchor-name: --slider-menu;
      display: flex;
    }

    .nav::before {
      content: "";
      position: absolute;
      left: anchor(var(--target) left);
      right: anchor(var(--target) right);
      bottom: anchor(var(--target) bottom);
      transition: all 0.3s;
      border-bottom: 0.3rem solid hsl(from var(--color) h s calc(l * 0.8));
    }

    .nav:has(div > label:not(:hover, :focus-visible))::before {
      visibility: hidden;
      opacity: 0;
      transition: all 0.3s;
    }

    label {
      anchor-name: var(--anchor);
      font-size: 1.2rem;
      font-weight: 500;
      cursor: pointer;
      color: #c4c4c4;
    }

    label.active {
      /* border-bottom: 0.3rem solid red; */
      color: #7b7b7b;
    }

    .nav > div:nth-child(1) {
      --anchor: --item-1;
    }

    .nav > div:nth-child(2) {
      --anchor: --item-2;
    }

    .nav > div:nth-child(3) {
      --anchor: --item-3;
    }

    .nav:has(:nth-child(1) label:is(:hover, :focus-visible)) {
      --target: --item-1;
      --color: red;
    }

    .nav:has(:nth-child(2) label:is(:hover, :focus-visible)) {
      --target: --item-2;
      --color: red;
    }

    .nav:has(:nth-child(3) label:is(:hover, :focus-visible)) {
      --target: --item-3;
      --color: red;
    }

    a:focus-visible {
      outline: none;
    }
  }

  @supports (animation-timeline: scroll()) {
    .headershit {
      position: fixed;
      top: 0;
      animation: heightdown linear both;
      z-index: 1;
      /* background: #f7f7f7; */

      border-bottom: none;
    }

    .tabdetails {
      margin: 13rem 0;
    }

    .displaytext {
      animation: displaytext linear both;
    }

    .headertop {
      animation: reducetext linear both;
    }

    .headername {
      animation: scaledownheaderpics linear both;
    }

    .headertop,
    .displaytext,
    .headershit,
    .headername,
    .headernametext {
      animation-timeline: scroll();
      animation-range: 0px 150px;
    }

    .headernametext {
      animation: movetextup linear both;
    }

    @keyframes scaledownheaderpics {
      to {
        transform: scale(0.7);
        transform-origin: left center;
      }
    }

    @keyframes heightdown {
      from {
        height: 13rem;
        font-size: 1em;
      }
      to {
        height: 7rem;
        font-size: 1em;
        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.05);
        background: var(--bg-color);
        color: var(--font-color);
      }
    }

    @media screen and (max-width: 800px) {
      @keyframes heightdown {
        from {
          height: 14rem;
          font-size: 1em;
        }
        to {
          height: 6rem;
          font-size: 1em;
          box-shadow: 0px 5px 20px rgba(0, 0, 0, 0.08);
          background: var(--bg-color);
        }
      }

      @keyframes scaledownheaderpics {
        from {
          transform: scale(0.8);
          transform-origin: left;
          transition: transform 0.3s ease-in-out;
        }
        to {
          transform: scale(0.7);
          transform-origin: left;
          transition: transform 0.3s ease-in-out;
        }
      }

      .profilename {
        transform: translateY(-15%);
      }
    }

    @keyframes reducetext {
      to {
        transform: translate(0%, 0%);
        /* margin-top: 1.5rem; */
      }
    }

    @keyframes displaytext {
      to {
        transform: translate(0%, -100%);
        /* visibility: hidden;
        opacity: 0; */
      }
    }
  }

  /* theme switch */

  .theme-switch-wrapper {
    display: flex;
    align-items: center;
  }

  .theme-switch-wrapper > em {
    margin-left: 10px;
    font-size: 1rem;
  }

  .theme-switch {
    display: inline-block;
    height: 34px;
    position: relative;
    width: 60px;
  }

  .theme-switch > input {
    display: none;
  }

  .slider {
    background-color: #ccc;
    bottom: 0;
    cursor: pointer;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    transition: 0.4s;
  }

  .slider:before {
    background-color: #fff;
    bottom: 4px;
    content: "";
    height: 26px;
    left: 4px;
    position: absolute;
    transition: 0.4s;
    width: 26px;
  }

  input:checked + .slider {
    background-color: #66bb6a;
  }

  input:checked + .slider:before {
    transform: translateX(26px);
  }

  .slider.round {
    border-radius: 34px;
  }

  .slider.round:before {
    border-radius: 50%;
  }
</style>

<script>
  const toggleSwitch = document.querySelector('.theme-switch input[type="checkbox"]');

  function switchTheme(e: Event) {
    const checkboxEvent = e.target as HTMLInputElement;
    if (checkboxEvent.checked) {
      document.documentElement.setAttribute("data-theme", "dark");
      localStorage.setItem("theme", "dark");
    } else {
      document.documentElement.setAttribute("data-theme", "light");
      localStorage.setItem("theme", "light");
    }
  }

  toggleSwitch?.addEventListener("change", switchTheme, false);
</script>
